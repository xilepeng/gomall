// Code generated by hertz generator.

package main

import (
	"context"
	"os"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	hertzprom "github.com/hertz-contrib/monitor-prometheus"
	hertzobslogrus "github.com/hertz-contrib/obs-opentelemetry/logging/logrus"
	hertzoteltracing "github.com/hertz-contrib/obs-opentelemetry/tracing"

	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/sessions"
	"github.com/hertz-contrib/sessions/redis"
	"github.com/joho/godotenv"
	"github.com/xilepeng/gomall/app/frontend/biz/router"
	"github.com/xilepeng/gomall/app/frontend/conf"
	"github.com/xilepeng/gomall/app/frontend/infra/rpc"
	"github.com/xilepeng/gomall/app/frontend/middleware"
	frontendutils "github.com/xilepeng/gomall/app/frontend/utils"
	"github.com/xilepeng/gomall/common/mtl"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

var (
	ServiceName  = frontendutils.ServiceName
	MetricsPort  = conf.GetConf().Hertz.MetricsPort
	RegistryAddr = conf.GetConf().Hertz.RegistryAddr
)

func main() {
	_ = godotenv.Load()

	p := mtl.InitTracing(ServiceName)
	defer p.Shutdown(context.Background())

	// init dal
	// dal.Init()
	consul, registryInfo := mtl.InitMetric(ServiceName, MetricsPort, RegistryAddr)
	defer consul.Deregister(registryInfo)
	rpc.InitClient()
	address := conf.GetConf().Hertz.Address

	// _ = hertzotelprovider.NewOpenTelemetryProvider(
	// 	hertzotelprovider.WithSdkTracerProvider(mtl.TracerProvider),
	// 	hertzotelprovider.WithEnableMetrics(false),
	// )

	// hertzoteltracing.WithCustomResponseHandler(func(ctx context.Context, c *app.RequestContext) {
	// 	c.Header("shop-trace-id", oteltrace.SpanFromContext(ctx).SpanContext().TraceID().String())
	// })

	tracer, cfg := hertzoteltracing.NewServerTracer()

	h := server.New(server.WithHostPorts(address),
		server.WithTracer(hertzprom.NewServerTracer("", "",
			hertzprom.WithRegistry(mtl.Registry), hertzprom.WithDisableServer(true)),
		), tracer)

	h.Use(hertzoteltracing.ServerMiddleware(cfg))
	registerMiddleware(h)

	h.LoadHTMLGlob("template/*")
	// h.Delims("{{", "}}")
	// h.Use(hertzoteltracing.ServerMiddleware(cfg))

	router.GeneratedRegister(h)
	h.Static("/static", "./")

	h.GET("/sign-in", func(c context.Context, ctx *app.RequestContext) {
		data := utils.H{
			"Title": "Sign In",
			"Next":  ctx.Query("next"),
		}
		ctx.HTML(consts.StatusOK,
			"sign-in", data)
	})

	h.GET("/sign-up", func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK,
			"sign-up", utils.H{"Title": "Sign Up"})
	})

	h.GET("/about", func(c context.Context, ctx *app.RequestContext) {
		hlog.CtxInfof(c, "CloudWeGo shop about page")
		ctx.HTML(consts.StatusOK,
			"about", utils.H{"Title": "About"})
	})

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// sessions
	store, _ := redis.NewStore(10, "tcp", conf.GetConf().Redis.Address, "", []byte(os.Getenv("SESSION_SECRET")))
	h.Use(sessions.New("shop", store))

	// log
	logger := hertzobslogrus.NewLogger(hertzobslogrus.WithLogger(hertzlogrus.NewLogger().Logger()))
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	var flushInterval time.Duration
	if os.Getenv("GO_ENV") == "online" {
		flushInterval = time.Minute
	} else {
		flushInterval = time.Second
	}

	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: flushInterval,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())

	middleware.Register(h)

}
